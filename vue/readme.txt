组件的使用:
1. 创建组件构造器
    调用 Vue.extend() 方法创建组件构造器
2. 注册组件
    调用 Vue.component() 方法注册组件
3. 使用组件
    在 Vue 实例的作用范围内使用组件

全局组件: 可以在任意 Vue 实例下使用
局部组件: 只能在指定 Vue 实例下使用

组件无法访问 Vue 实例数据(顶层 Vue 实例的 data 无法被组件访问).
另, 即使可以访问, 如果把所有数据放在 顶层 Vue 实例, Vue 实例 data 域将会变得非常臃肿
组件是一个单独功能模块的封装:
    模块有属于自己的 HTML 模板, 也应该有自己的 data
    组件的 data 类型必须为 function 类型, 该函数必须返回一个对象, 内部保存着数据
    组件也有 methods 属性

父子组件的通信
   子组件无法直接访问父组件或者 Vue 实例的数据.
   但是, 在开发中, 往往一些数据确实需要从上层传递到下层:
     比如, 一个页面中, 从服务器请求到了很多的数据, 其中一部分数据, 并非是整个页面的父组件
     来展示, 而是需要下面的子组件进行处理展示, 这时, 并不会让子组件单独发送网络请求, 而是
     直接让 父组件 将数据传递给 子组件.
  通信方式:
   1. 通过 props 向 子组件 传递数据
      props 的值有两种方式:
        1.1. 字符串数组, 数组中的字符串就是传递时的名称;
        1.2. 对象, 对象可以设置传递时的类型, 也可以设置默认值等
           验证支持的数据类型: String, Number, Boolean, Array, Object, Date, Function, Symbol
           另, 有自定义构造函数时, 也支持自定义的类型验证
   2. 通过 事件 向 父组件 发送消息

Vue 官方: 父组件模板的所有东西都会在父级作用域内编译; 子组件模板的所有东西都会在子级作用域内编译.
作用域 slot: 父组件替换 slot 的标签, 但是内容由子组件来提供