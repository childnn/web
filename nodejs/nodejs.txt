官方文档: https://nodejs.dev/learn
A Node.js app runs in a single process, without creating a new thread for every request.
Node.js provides a set of asynchronous I/O primitives in its standard library
that prevent JavaScript code from blocking and generally,
libraries in Node.js are written using non-blocking paradigms, making blocking behavior the exception rather than the norm.
When Node.js performs an I/O operation, like reading from the network, accessing a database or the filesystem,
instead of blocking the thread and wasting CPU cycles waiting, Node.js will resume the operations when the response comes back.
This allows Node.js to handle thousands of concurrent connections with a single server
without introducing the burden of managing thread concurrency, which could be a significant source of bugs.



包结构:
   包实际上就是一个压缩文件, 解压后还原为目录. 符合规范的目录,因该包含如下文件
   - package.json  描述文件 -- 必须存在
   - bin 可执行二进制文件
   - lib js 文件
   - doc 文档
   - test 单元测试
NPM: Node Package Manager
  $ npm -v
   - 查看版本
  $ npm
   - 帮助说明
  $ npm search 包名
   - 搜索模块包
  $ npm install/i 包名
   - 在当前目录安装包
  $ npm install 包名 -g
   - 全局模式安装包
  $ npm install 包名 --save
   - 安装包并添加到依赖中 package.json 文件
  $ npm install
   - 下载当前项目依赖的包 package.json 中指定的依赖
  $ npm init
   - 当前目录创建 package.json
  $ npm remove/r 包名
   - 删除一个模块
  $ npm install 文件路径
   - 从本地安装
  $ npm install 包名 -registry=地址
   - 从镜像源安装
  $ npm config set registry 地址
   - 设置镜像源
