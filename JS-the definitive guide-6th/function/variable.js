// variable
/**
 * 变量作用域: 作用域链
 * 每一段 JS 代码(全局代码或函数)都有一个与之关联的作用域链 scope chain. 这个作用域链是一个对象列表或者链表,
 * 这组对象定义了这段代码 '作用域中' 的变量. 当 JS 需要查找变量 x 的值时(这个过程称为 '变量解析' variable resolution),
 * 它会从链中的第一个对象开始查找, 如果这个对象有一个名为 x 的属性, 则会直接使用这个属性的值, 如果第一个对象中不存在名为 x 的属性,
 * JS 会继续查找链上的下一个对象. 如果第二个对象依然没有名为 x 的属性, 则会继续查找下一个对象, 一次类推. 如果作用域链上没有
 * 任何一个对象含有属性 x, 那么就认为这段代码的作用域链上不存在 x, 并最终抛出一个引用错误异常 ReferenceError.
 *
 */
'use strict';

var scope = 'global';

// 变量声明提前: 虽然代码还没有执行到 第一个输出 var 语句声明局部变量的地方, -- 会误以为第一个输出 'global'
// 但由于函数作用域的特性, 局部变量在整个函数体始终是有定义的, 也就是说, 在函数体内局部变量遮盖了同名全局变量.
// 尽管如此, 只有在程序执行到 var 语句的时候, 局部变量才会被真正赋值.
(function () {
    console.log(scope); // 输出 'undefined', 而不是 'global'
    var scope = 'local'; // 变量在这里赋初始值, 但变量本身在函数体内任何地方均是有定义的
    console.log(scope); // 输出 'local'
})();

// 因此, 上述过程等价于: 将函数内的变量声明 '提前' 至函数体顶部, 同时变量初始化留在原来的位置

(function () {
    var scope;
    console.log(scope);
    scope = 'local';
    console.log(scope);
})();