/*
* H5 定义了一个相对更加复杂和强健的历史记录管理方法, 该方法包含 history.pushState() 方法
* 和 popstate 事件. 当一个 Web 应用进入一个新的状态的时候, 它会调用 history.pushState()
* 方法将该状态添加到浏览器的浏览历史记录中.
* 该方法的第一个参数是一个对象, 该对象包含用于恢复当前文档状态所需的所有信息. 该对象可以是任何
* 能够通过 JSON.stringify() 方法转换成相应字符串形式的对象, 也可以是其他类似 Date
* 和 RegExp 这样特定的本地类型.
* 该方法的第二个参数是一个可选的标题(普通文本字符串), 浏览器可以使用它来标识浏览历史记录中保存的状态.
* 该方法的第三个参数是一个可选的 URL, 标识当前状态的位置. 相对的 URL 都是以文档的当前位置为参照.
* --
* 结构性复制:
*   如上文, pushState() 方法接受一个状态对象并为该对象创建一份私有副本. 这时对一个对象进行深拷贝:
* 它会递归地复制所有嵌套对象或者数组的内容. H5 标准将这类复制称为 "结构性复制"(structure clone).
* 创建一个结构性复制的过程就好比是将一个对象传递给 JSON.stringify() 方法, 然后再将结果字符串传递给
* JSON.parse() 方法. 但是 JSON 只支持 JS 的基础类型和对象以及数组.
* 在 H5 标准中, 结构性复制算法必须还能复制 Date 对象, RegExp 对象, ImageData 对象, FileList 对象,
* File 对象以及 Blob 对象. 但是结构性复制算法会显式排除 JS 中的函数和错误以及绝大部分诸如窗口、文档、元素等
* 这类宿主对象. 或许还不会存储文件或者图片数据作为历史状态的一部分.
* History 对象还定义了 replaceState() 方法, 用给定参数更新当前历史状态.
* 当用户通过 "后退" 和 "前进" 按钮浏览保存的历史状态时, 浏览器会在 Window 对象上触发一个 popstate 事件.
* 该事件相关联的事件对象有一个 state 属性, 该属性包含传递给 pushState() 方法的状态对象的副本(另一个结构性复制).
*
* */